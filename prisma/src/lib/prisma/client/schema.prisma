// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./src/lib/prisma/client" // MODIFIED: Set a new output path
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String   @default("placeholder")
  avatar    String?
  role      UserRole @default(USER)
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // Relations
  ownedProjects  Project[]       @relation("ProjectOwner")
  projectMembers ProjectMember[]
  tasks          Task[]
  comments       Comment[]
  timeEntries    TimeEntry[]
  createdFiles   File[]
  notifications  Notification[]
  documents      Document[]

  // Financial Relations
  clients            Client[]
  invoices           Invoice[]
  expenses           Expense[]
  subscriptions      Subscription[]
  budgets            Budget[]
  financialDocuments FinancialDocument[]
}

// User roles
enum UserRole {
  ADMIN
  USER
  VIEWER
}

model Document {
  id    String @id @default(cuid())
  title String
  name  String
  type  String
  size  Int
  path  String

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relation to Project
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  // Relation to Expense
  expenseId String?
  expense   Expense? @relation(fields: [expenseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Contact model for external contacts (not app users)
model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String?
  phone     String?
  company   String?
  role      String?
  notes     String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  projects ProjectContact[]

  @@map("contacts")
}

// Project model
model Project {
  id          String        @id @default(cuid())
  name        String
  description String?       @db.Text
  projectGoal String?       @db.Text
  website     String?
  status      ProjectStatus @default(PLANNING)
  priority    Priority      @default(MEDIUM)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  owner          User             @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId        String
  members        ProjectMember[]
  contacts       ProjectContact[]
  tasks          Task[]
  categories     Category[]
  files          File[]
  notifications  Notification[]
  timelineEvents TimelineEvent[]
  documents      Document[]

  @@map("projects")
}

// Project contacts (many-to-many)
model ProjectContact {
  id        String   @id @default(cuid())
  projectId String
  contactId String
  createdAt DateTime @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  contact Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@unique([projectId, contactId])
  @@map("project_contacts")
}

// Project status
enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

// Priority levels
enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// Project members (many-to-many)
model ProjectMember {
  id        String            @id @default(cuid())
  role      ProjectMemberRole @default(MEMBER)
  joinedAt  DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  // Relations
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  @@unique([userId, projectId])
  @@map("project_members")
}

// Project member roles
enum ProjectMemberRole {
  ADMIN
  MEMBER
  VIEWER
}

// Category model for organizing tasks
model Category {
  id          String  @id @default(cuid())
  name        String
  color       String  @default("#3B82F6")
  description String?
  // Relations
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  tasks       Task[]

  @@unique([name, projectId])
  @@map("categories")
}

// Task model
model Task {
  id             String     @id @default(cuid())
  title          String
  description    String?    @db.Text
  status         TaskStatus @default(TODO)
  priority       Priority   @default(MEDIUM)
  startDate      DateTime?
  dueDate        DateTime?
  completedAt    DateTime?
  estimatedHours Float?
  actualHours    Float?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  // Relations
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  assignee    User?       @relation(fields: [assigneeId], references: [id], onDelete: SetNull)
  assigneeId  String?
  category    Category?   @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId  String?
  parent      Task?       @relation("TaskSubtasks", fields: [parentId], references: [id], onDelete: Cascade)
  parentId    String?
  subtasks    Task[]      @relation("TaskSubtasks")
  comments    Comment[]
  timeEntries TimeEntry[]
  files       File[]

  @@map("tasks")
}

// Task status
enum TaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  COMPLETED
  CANCELLED
}

// Comment model
model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String
  task     Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId   String

  @@map("comments")
}

// Time tracking model
model TimeEntry {
  id          String    @id @default(cuid())
  description String?
  startTime   DateTime
  endTime     DateTime?
  duration    Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String

  @@map("time_entries")
}

// File model for file uploads
model File {
  id           String   @id @default(cuid())
  originalName String
  filename     String
  mimetype     String
  size         Int
  path         String
  createdAt    DateTime @default(now())

  // Relations
  uploader   User     @relation(fields: [uploaderId], references: [id], onDelete: Cascade)
  uploaderId String
  project    Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId  String?
  task       Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId     String?

  @@map("files")
}

// Notification model
model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String           @db.Text
  type      NotificationType @default(INFO)
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String?

  @@map("notifications")
}

// Notification types
enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  TASK_ASSIGNED
  TASK_COMPLETED
  PROJECT_UPDATED
  COMMENT_ADDED
}

// New model for Timeline Events
model TimelineEvent {
  id          String    @id @default(cuid())
  title       String
  description String?   @db.Text
  eventDate   DateTime?
  isCompleted Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  @@map("timeline_events")
}

// Model for Feature Requests
model FeatureRequest {
  id          Int      @id @default(autoincrement())
  title       String
  description String   @db.Text
  status      String   @default("Pending")
  priority    String   @default("Medium")
  submittedBy String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// --- FINANCIAL MODELS ---

enum ContractTerm {
  ONE_MONTH
  ONE_TIME
  THREE_MONTH
  SIX_MONTH
  ONE_YEAR
}

model Client {
  id                String       @id @default(cuid())
  name              String
  email             String?
  website           String?
  notes             String?      @db.Text
  contractTerm      ContractTerm @default(ONE_TIME)
  contractAmount    Float?
  contractStartDate DateTime?
  frequency         String?

  // Relations
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoices  Invoice[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Invoice {
  id            String              @id @default(cuid())
  invoiceNumber String              @unique
  status        InvoiceStatus       @default(DRAFT)
  amount        Float
  issuedDate    DateTime
  dueDate       DateTime
  clientId      String
  client        Client              @relation(fields: [clientId], references: [id])
  userId        String
  user          User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  documents     FinancialDocument[]
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @default(now()) @updatedAt
}

enum InvoiceStatus {
  DRAFT
  PENDING
  PAID
  OVERDUE
}

model Expense {
  id          String          @id @default(cuid())
  description String
  amount      Float
  category    ExpenseCategory
  date        DateTime
  userId      String
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  documents Document[]

  financialDocuments FinancialDocument[] @relation("ExpenseFinancialDocuments")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum ExpenseCategory {
  SOFTWARE
  MARKETING
  OFFICE_SUPPLIES
  TRAVEL
  OTHER
}

enum BillingCycle {
  MONTHLY
  ANNUALLY
}

model Subscription {
  id           String       @id @default(cuid())
  name         String
  amount       Float
  billingCycle BillingCycle @default(MONTHLY)
  dueDate      DateTime?
  userId       String
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now()) @updatedAt
}

model Budget {
  id        String   @id @default(cuid())
  category  String
  amount    Float
  month     Int
  year      Int
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, category, month, year])
}

model FinancialDocument {
  id         String   @id @default(cuid())
  fileName   String
  fileUrl    String
  uploadDate DateTime @default(now())
  category   String
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoiceId  String?
  invoice    Invoice? @relation(fields: [invoiceId], references: [id])
  expenseId  String?
  expense    Expense? @relation("ExpenseFinancialDocuments", fields: [expenseId], references: [id])
}
