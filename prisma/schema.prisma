// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Changed from "mysql"
  url      = env("DATABASE_URL")
}

// --- AUTHENTICATION MODELS ---

model User {
  id                    String    @id @default(cuid())
  name                  String?
  email                 String?   @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole  @default(USER)
  isActive              Boolean   @default(false)
  sendDailyManifest     Boolean   @default(false)
  sendAfternoonManifest Boolean   @default(false)
  enableCloseableNotifications Boolean @default(true)
  closedNotifications         Json?   @default("[]")
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // Relations
  accounts             Account[]
  sessions             Session[]
  ownedProjects        Project[]            @relation("ProjectOwner")
  projectMembers       ProjectMember[]
  tasks                Task[]
  comments             Comment[]
  timeEntries          TimeEntry[]
  createdFiles         File[]
  notifications        Notification[]
  documents            Document[]
  clients              Client[]
  invoices             Invoice[]
  expenses             Expense[]
  subscriptions        Subscription[]
  budgets              Budget[]
  financialDocuments   FinancialDocument[]
  documentation        Documentation[]      // NEW: Added relation to Documentation
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


// --- EXISTING MODELS ---

enum UserRole {
  ADMIN
  USER
  VIEWER
}

model Document {
  id        String   @id @default(cuid())
  title     String
  name      String
  type      String
  size      Int
  path      String

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  projectId String?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  expenseId String?
  expense   Expense? @relation(fields: [expenseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String?
  phone     String?
  company   String?
  role      String?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projects ProjectContact[]

  @@map("contacts")
}

model Project {
  id           String         @id @default(cuid())
  name         String
  description  String?
  projectGoal  String?
  projectValue Float?
  website      String?
  status       ProjectStatus  @default(PLANNING)
  priority     Priority       @default(MEDIUM)
  projectType  ProjectType    @default(PERSONAL_PROJECT)
  startDate    DateTime?
  endDate      DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  owner        User           @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId      String
  members      ProjectMember[]
  contacts     ProjectContact[]
  tasks        Task[]
  categories   Category[]
  files        File[]
  notifications Notification[]
  timelineEvents TimelineEvent[]
  documents    Document[]

  @@map("projects")
}

model ProjectContact {
  id        String   @id @default(cuid())
  projectId String
  contactId String
  createdAt DateTime @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  contact Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@unique([projectId, contactId])
  @@map("project_contacts")
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ProjectType {
  POTENTIAL_CLIENT
  QUALIFIED_CLIENT
  CURRENT_CLIENT
  PAST_CLIENT
  PERSONAL_PROJECT
  PROFESSIONAL_PROJECT
}

model ProjectMember {
  id        String            @id @default(cuid())
  role      ProjectMemberRole @default(MEMBER)
  joinedAt  DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  @@unique([userId, projectId])
  @@map("project_members")
}

enum ProjectMemberRole {
  ADMIN
  MEMBER
  VIEWER
}

model Category {
  id          String  @id @default(cuid())
  name        String
  color       String  @default("#3B82F6")
  description String?
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  tasks     Task[]

  @@unique([name, projectId])
  @@map("categories")
}

model Task {
  id             String     @id @default(cuid())
  title          String
  description    String?
  status         TaskStatus @default(TODO)
  priority       Priority   @default(MEDIUM)
  startDate      DateTime?
  dueDate        DateTime?
  completedAt    DateTime?
  estimatedHours Float?
  actualHours    Float?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  project      Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId    String
  assignee     User?       @relation(fields: [assigneeId], references: [id], onDelete: SetNull)
  assigneeId   String?
  category     Category?   @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId   String?
  parent       Task?       @relation("TaskSubtasks", fields: [parentId], references: [id], onDelete: Cascade)
  parentId     String?
  subtasks     Task[]      @relation("TaskSubtasks")
  comments     Comment[]
  timeEntries  TimeEntry[]
  files        File[]

  @@map("tasks")
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  COMPLETED
  CANCELLED
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String
  task     Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId   String

  @@map("comments")
}

model TimeEntry {
  id          String   @id @default(cuid())
  description String?
  startTime   DateTime
  endTime     DateTime?
  duration    Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String

  @@map("time_entries")
}

model File {
  id           String   @id @default(cuid())
  originalName String
  filename     String
  mimetype     String
  size         Int
  path         String
  createdAt    DateTime @default(now())

  uploader   User    @relation(fields: [uploaderId], references: [id], onDelete: Cascade)
  uploaderId String
  project    Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId  String?
  task       Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId     String?
  @@map("files")
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  type      NotificationType @default(INFO)
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String?

  @@map("notifications")
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  TASK_ASSIGNED
  TASK_COMPLETED
  PROJECT_UPDATED
  COMMENT_ADDED
}

model TimelineEvent {
  id          String   @id @default(cuid())
  title       String
  description String?
  eventDate   DateTime?
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  @@map("timeline_events")
}

// UPDATED: FeatureRequest model with conversion tracking
model FeatureRequest {
  id                        Int           @id @default(autoincrement())
  title                     String
  description               String
  status                    String        @default("Pending")
  priority                  String        @default("Medium")
  submittedBy               String
  createdAt                 DateTime      @default(now())
  updatedAt                 DateTime      @updatedAt
  dueDate                   DateTime?
  
  // NEW: Conversion tracking fields
  isConverted               Boolean       @default(false)
  convertedToDocumentationId String?      @unique  // Added @unique here
  convertedToDocumentation  Documentation? @relation(fields: [convertedToDocumentationId], references: [id], onDelete: SetNull)
}

// --- NEW DOCUMENTATION MODEL ---

enum DocumentationCategory {
  DEVELOPMENT
  PROJECTS
  CLIENTS
  OPERATIONS
  FINANCIALS
  SETTINGS
}

model Documentation {
  id                    String                @id @default(cuid())
  title                 String
  content               String                @db.Text  // Large text field for content
  category              DocumentationCategory
  tags                  String[]              // Array of tags for searchability
  isPublished           Boolean               @default(true)
  
  // Relations
  sourceFeatureRequestId Int?                 @unique  // Optional reference to original feature request
  sourceFeatureRequest   FeatureRequest?      @relation  // Relation to feature request
  
  userId                String
  user                  User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  
  @@map("documentation")
}

// --- FINANCIAL MODELS ---

enum ContractTerm {
  ONE_MONTH
  ONE_TIME
  THREE_MONTH
  SIX_MONTH
  ONE_YEAR
}

// Update the existing Client model
model Client {
  id                String          @id @default(cuid())
  name              String
  email             String?
  website           String?
  
  // New fields
  billTo            String?         // Billing contact name
  phone             String?         // Main phone number
  address1          String?
  address2          String?
  city              String?
  state             String?
  zipCode           String?
  
  notes             String?
  contractTerm      ContractTerm    @default(ONE_TIME)
  contractAmount    Float?
  contractStartDate DateTime?
  frequency         String?
  
  userId            String
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoices          Invoice[]
  contacts          ClientContact[] // New relation
  
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

// Add this new model for Client Contacts
model ClientContact {
  id          String   @id @default(cuid())
  name        String
  email       String?
  phone       String?
  note        String?
  clientId    String
  client      Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("client_contacts")
}

model Invoice {
  id            String        @id @default(cuid())
  invoiceNumber String        @unique
  status        InvoiceStatus @default(DRAFT)
  amount        Float
  issuedDate    DateTime
  dueDate       DateTime
  clientId      String
  client        Client        @relation(fields: [clientId], references: [id])
  userId        String
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  documents     FinancialDocument[]
  lineItems     LineItem[]    // ADDED: Relation to line items
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt
}

enum InvoiceStatus {
  DRAFT
  PENDING
  PAID
  OVERDUE
}

// ADDED: New LineItem model
model LineItem {
  id          String   @id @default(cuid())
  date        DateTime
  description String
  amount      Float
  invoiceId   String
  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("invoice_line_items")
}

model Expense {
  id          String          @id @default(cuid())
  description String
  amount      Float
  category    ExpenseCategory
  date        DateTime
  userId      String
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  documents   Document[]

  financialDocuments   FinancialDocument[] @relation("ExpenseFinancialDocuments")

  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @default(now()) @updatedAt
}

enum ExpenseCategory {
  SOFTWARE
  MARKETING
  OFFICE_SUPPLIES
  TRAVEL
  OTHER
}

enum BillingCycle {
  MONTHLY
  ANNUALLY
}

model Subscription {
  id           String       @id @default(cuid())
  name         String
  amount       Float
  billingCycle BillingCycle @default(MONTHLY)
  dueDate      DateTime?
  userId       String
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now()) @updatedAt
}

model Budget {
  id        String   @id @default(cuid())
  category  String
  amount    Float
  month     Int
  year      Int
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, category, month, year])
}

model FinancialDocument {
  id         String   @id @default(cuid())
  fileName   String
  fileUrl    String
  uploadDate DateTime @default(now())
  category   String
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoiceId  String?
  invoice    Invoice? @relation(fields: [invoiceId], references: [id])
  expenseId  String?
  expense    Expense? @relation("ExpenseFinancialDocuments", fields: [expenseId], references: [id])
}

// --- APPLICATION SETTINGS ---

model AppearanceSettings {
  id                 String   @id @default("global_settings")
  businessName       String?
  missionStatement   String?
  lightModeLogoUrl   String?
  lightModeIconUrl   String?
  darkModeLogoUrl    String?
  darkModeIconUrl    String?
  updatedAt          DateTime @updatedAt

  // Light Theme Colors
  lightBackground         String? @default("#ffffff") // white
  lightForeground         String? @default("#020817") // slate-950
  lightCard               String? @default("#ffffff") // white
  lightCardForeground     String? @default("#020817") // slate-950
  lightPopover            String? @default("#ffffff") // white
  lightPopoverForeground  String? @default("#020817") // slate-950
  lightPrimary            String? @default("#18181b") // zinc-900
  lightPrimaryForeground  String? @default("#fafafa") // zinc-50
  lightSecondary          String? @default("#f4f4f5") // zinc-100
  lightSecondaryForeground String? @default("#18181b") // zinc-900
  lightMuted              String? @default("#f4f4f5") // zinc-100
  lightMutedForeground    String? @default("#71717a") // zinc-500
  lightAccent             String? @default("#f4f4f5") // zinc-100
  lightAccentForeground   String? @default("#18181b") // zinc-900
  lightDestructive        String? @default("#ef4444") // red-500
  lightDestructiveForeground String? @default("#fafafa") // zinc-50
  lightBorder             String? @default("#e4e4e7") // zinc-200
  lightInput              String? @default("#e4e4e7") // zinc-200
  lightRing               String? @default("#18181b") // zinc-900

  // Dark Theme Colors
  darkBackground          String? @default("#09090b") // zinc-950
  darkForeground          String? @default("#fafafa") // zinc-50
  darkCard                String? @default("#09090b") // zinc-950
  darkCardForeground      String? @default("#fafafa") // zinc-50
  darkPopover             String? @default("#09090b") // zinc-950
  darkPopoverForeground   String? @default("#fafafa") // zinc-50
  darkPrimary             String? @default("#fafafa") // zinc-50
  darkPrimaryForeground   String? @default("#18181b") // zinc-900
  darkSecondary           String? @default("#27272a") // zinc-800
  darkSecondaryForeground String? @default("#fafafa") // zinc-50
  darkMuted               String? @default("#27272a") // zinc-800
  darkMutedForeground     String? @default("#a1a1aa") // zinc-400
  darkAccent              String? @default("#27272a") // zinc-800
  darkAccentForeground    String? @default("#fafafa") // zinc-50
  darkDestructive         String? @default("#7f1d1d") // red-900
  darkDestructiveForeground String? @default("#fafafa") // zinc-50
  darkBorder              String? @default("#27272a") // zinc-800
  darkInput               String? @default("#27272a") // zinc-800
  darkRing                String? @default("#d4d4d8") // zinc-300
}

// --- LAYOUT TEMPLATES ---

model LayoutTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  category    String   @default("dashboard") // dashboard, report, email, invoice, etc.
  htmlContent String   @db.Text // Stores the HTML template
  thumbnail   String?  // Optional screenshot/preview URL
  isActive    Boolean  @default(false)
  isDefault   Boolean  @default(false)
  metadata    String?  @db.Text // JSON string for additional template metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("layout_templates")
}