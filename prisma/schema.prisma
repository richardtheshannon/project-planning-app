// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String   // Added password field
  avatar    String?
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  ownedProjects    Project[]       @relation("ProjectOwner")
  projectMembers   ProjectMember[]
  tasks            Task[]
  comments         Comment[]
  timeEntries      TimeEntry[]
  createdFiles     File[]
  notifications    Notification[]
}

// User roles
enum UserRole {
  ADMIN
  USER
  VIEWER
}

// Project model
model Project {
  id          String        @id @default(cuid())
  name        String
  description String?       @db.Text
  status      ProjectStatus @default(PLANNING)
  priority    Priority      @default(MEDIUM)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  owner         User            @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId       String
  members       ProjectMember[]
  tasks         Task[]
  categories    Category[]
  files         File[]
  notifications Notification[]

  @@map("projects")
}

// Project status
enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

// Priority levels
enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// Project members (many-to-many)
model ProjectMember {
  id        String            @id @default(cuid())
  role      ProjectMemberRole @default(MEMBER)
  joinedAt  DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  // Relations
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  @@unique([userId, projectId])
  @@map("project_members")
}

// Project member roles
enum ProjectMemberRole {
  ADMIN
  MEMBER
  VIEWER
}

// Category model for organizing tasks
model Category {
  id          String @id @default(cuid())
  name        String
  color       String @default("#3B82F6")
  description String?

  // Relations
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  tasks     Task[]

  @@unique([name, projectId])
  @@map("categories")
}

// Task model
model Task {
  id          String     @id @default(cuid())
  title       String
  description String?    @db.Text
  status      TaskStatus @default(TODO)
  priority    Priority   @default(MEDIUM)
  startDate   DateTime?
  dueDate     DateTime?
  completedAt DateTime?
  estimatedHours Float?
  actualHours    Float?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  assignee    User?        @relation(fields: [assigneeId], references: [id], onDelete: SetNull)
  assigneeId  String?
  category    Category?    @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId  String?
  parent      Task?        @relation("TaskSubtasks", fields: [parentId], references: [id], onDelete: Cascade)
  parentId    String?
  subtasks    Task[]       @relation("TaskSubtasks")
  comments    Comment[]
  timeEntries TimeEntry[]
  files       File[]

  @@map("tasks")
}

// Task status
enum TaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  COMPLETED
  CANCELLED
}

// Comment model
model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  author User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String
  task     Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId   String

  @@map("comments")
}

// Time tracking model
model TimeEntry {
  id          String    @id @default(cuid())
  description String?
  startTime   DateTime
  endTime     DateTime?
  duration    Int?      // Duration in minutes
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String

  @@map("time_entries")
}

// File model for file uploads
model File {
  id           String   @id @default(cuid())
  originalName String
  filename     String
  mimetype     String
  size         Int
  path         String
  createdAt    DateTime @default(now())

  // Relations
  uploader  User     @relation(fields: [uploaderId], references: [id], onDelete: Cascade)
  uploaderId String
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String?
  task      Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    String?

  @@map("files")
}

// Notification model
model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String           @db.Text
  type      NotificationType @default(INFO)
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String?

  @@map("notifications")
}

// Notification types
enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  TASK_ASSIGNED
  TASK_COMPLETED
  PROJECT_UPDATED
  COMMENT_ADDED
}